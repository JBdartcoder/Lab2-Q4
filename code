import sympy as sym
import control as ctrl
import matplotlib.pyplot as plt
import numpy as np

# Define all involved symbolic variables
# constants
M, m, g, ell = sym.symbols('M, m, g, ell')

# system variables
x1, x2, x3, x4, F = sym.symbols('x1, x2, x3, x4, F')

# Define φ
phi = 4 * m * ell * x4**2 * sym.sin(x3) + 4 * F - 3 * m * g * sym.sin(x3) * sym.cos(x3)
phi /= 4 * (M + m) - 3 * m * sym.cos(x3)**2

# Define Ψ
psi = -3 * (m * ell * x4**2 * sym.sin(x3) * sym.cos(x3) + F * sym.cos(x3) - (M + m) * g * sym.sin(x3))
psi /= ell * (4 * (M + m) - 3 * m * sym.cos(x3)**2)


# Implement function to take symbolic expression dependant on F, x3 & x4
# and evaluate it at equilibrium points F0, x30, x40
def evaluate_at_equilibrium(f):
    return f.subs([(F, F0), (x3, x30), (x4, x40)])


# Define equilibrium points (all 0 in this case)
F0 = 0
x30 = 0
x40 = 0

# Compute the derivatives of φ at the equilibrium point
phi_deriv_F_at_equlibrium = evaluate_at_equilibrium(phi.diff(F))
phi_deriv_x3_at_equlibrium = evaluate_at_equilibrium(phi.diff(x3))
phi_deriv_x4_at_equlibrium = evaluate_at_equilibrium(phi.diff(x4))

# Compute the derivatives of Ψ at the equilibrium point
psi_deriv_F_at_equlibrium = evaluate_at_equilibrium(psi.diff(F))
psi_deriv_x3_at_equlibrium = evaluate_at_equilibrium(psi.diff(x3))
psi_deriv_x4_at_equlibrium = evaluate_at_equilibrium(psi.diff(x4))

# Declare determined values of a-d
a = phi_deriv_F_at_equlibrium
b = -phi_deriv_x3_at_equlibrium
c = -psi_deriv_F_at_equlibrium
d = psi_deriv_x3_at_equlibrium

# State values of given parameters
M_value = 0.3
m_value = 0.1
ell_value = 0.35
g_value = 9.81

# Substitute values of the constants into the equations for a-d
a_value = float(a.subs([(M, M_value), (m, m_value)]))
b_value = float(b.subs([(M, M_value), (m, m_value), (g, g_value)]))
c_value = float(c.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)]))
d_value = float(d.subs([(M, M_value), (m, m_value), (g, g_value), (ell, ell_value)]))

# Declare number of points and times for plots
n_points = 500
t_final = 0.2
t_span = np.linspace(0, t_final, n_points)

# State the input disturbance force on the system
input_signal = np.sin(100 * t_span**2)

# Declare G_theta transfer function
G_theta_tf = ctrl.TransferFunction([-c_value], [1, 0, -d_value])

# Declare G_x transfer function
G_x_tf = ctrl.TransferFunction([a_value, 0, ((b_value*c_value)-(a_value*d_value))], [1, 0, -d_value, 0, 0])

# Determine response of G_theta
t_step, y_step, x_step = ctrl.forced_response(G_theta_tf, t_span, input_signal)

# Determine response of G_x
t_imp, y_imp, x_imp = ctrl.forced_response(G_x_tf, t_span, input_signal)

# Plot response of G_theta -> theta vs. time
plt.plot(t_step, y_step)
plt.grid()
plt.xlabel('Time (s)')
plt.ylabel('Rod Angle, ${\\theta}$ (radians)')
plt.show()

# Plot response of G_x -> horizontal position, x vs. time
plt.plot(t_imp, y_imp)
plt.grid()
plt.xlabel('Time (s)')
plt.ylabel('x (m)')
plt.show()
